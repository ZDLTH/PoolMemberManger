package view;import pojo.Goods;import service.GoodsService;import service.impl.GoodsServiceImpl;import javax.swing.*;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.DefaultTableModel;import java.awt.*;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.sql.SQLException;import java.util.*;import java.util.List;public class GoodsManage extends JFrame {    int width = 1000;    int height = 600;    private DefaultTableModel goodsTableModel =  new DefaultTableModel(){        @Override        public boolean isCellEditable(int rowIndex, int colIndex){            if(colIndex == 0){                return false;            }            return true;        }    };    Object[] title = {"商品号", "名称", "价格","库存"};    private JTable goodsTable = new JTable();    Panel tablePanel = new Panel(new BorderLayout());    GoodsService goodsService = new GoodsServiceImpl();    private JPanel searchPanel = new JPanel();    JComboBox searchCondition = new JComboBox();    JTextField inputSearchCondition = new JTextField(10);    JButton searchButton = new JButton("查询");    JButton searchAllButton = new JButton("查询全部");    private JPanel southPanel = new JPanel();    JButton addButton = new JButton("添加");    JButton sureAddButton = new JButton("确认添加");    JButton clearButton = new JButton("删除");    JButton updateButton = new JButton("确认修改");    JButton cancelButton = new JButton("取消修改");    //修改之前的数据    Object[][] beforeData;    int maxCode = 0;    Vector addRows = new Vector();    Map<String, Object> updateRows = new HashMap<>();    /**     * 用来放换页的按钮     */    public GoodsManage(){        viewInit();        buttonInit();    }    private void viewInit(){        int x = Toolkit.getDefaultToolkit().getScreenSize().width;        int y = Toolkit.getDefaultToolkit().getScreenSize().height;        this.setBounds((x - width) / 2,                (y - height) / 2, width, height);        this.setLayout(new BorderLayout(5,20));        setSize(width, height);        goodsTableInit();        searchPanelInit();        southPanelInit();    }    private void goodsTableInit(){        List<Goods> goods = null;        try {            goods = goodsService.queryAllGoods();        } catch (SQLException e) {            e.printStackTrace();        }        updateData(goods);        goodsTable.getModel().addTableModelListener(new TableModelListener() {            @Override            public void tableChanged(TableModelEvent e) {                int firstRow = e.getFirstRow();                if(firstRow >= 0 ){                    String value = (String) goodsTableModel.getValueAt(firstRow, 0);                    updateRows.remove(value);                    Vector v = new Vector();                    for (int i = 0 ; i < title.length; i++){                        v.add (goodsTableModel.getValueAt(firstRow, i));                    }                    updateRows.put(value, v);                }            }        });        goodsTable.setAutoCreateRowSorter(true);        // 产生一个带滚动条的面板        JScrollPane scrollPane = new JScrollPane(goodsTable);        // 将带滚动条的面板添加入窗口中        getContentPane().add(scrollPane, BorderLayout.CENTER);        tablePanel.add(goodsTable.getTableHeader(),BorderLayout.NORTH);        tablePanel.add(scrollPane, BorderLayout.CENTER);        this.add(tablePanel, BorderLayout.CENTER);    }    private void searchPanelInit(){        searchPanel.setBackground(new Color(138,210,147));        searchPanel.add(new JLabel("请选择查询条件"));        searchCondition.addItem("商品号");        searchCondition.addItem("商品名称");        searchPanel.add(searchCondition);        inputSearchCondition.setSize(100, 50);        searchPanel.add(inputSearchCondition);        this.add(searchPanel, BorderLayout.NORTH);    }    private void southPanelInit(){        southPanel.setBackground(new Color(138,210,147));        this.add(southPanel, BorderLayout.SOUTH);    }    private void buttonInit() {        searchButtonInit();        searchAllButtonInit();        addButtonInit();        sureAddButtonInit();        clearButtonInit();        updateButtonInit();        cancelButtonInit();    }    private void searchButtonInit(){        searchButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                String selectedCondition = (String) searchCondition.getSelectedItem();                String text = inputSearchCondition.getText();                String condition = "";                if("商品号".equals(selectedCondition)){                    condition = " goods_Code = "+ text;                }                else if("商品名称".equals(selectedCondition)){                    condition = " name like " + "'%" + text +"%'";                }                List<Goods> g = null;                try {                    g = goodsService.queryGoodsByCondition(condition);                } catch (SQLException ex) {                    ex.printStackTrace();                }                updateData(g);            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        searchButton.setPreferredSize(new Dimension(100,20));        searchButton.setBackground(new Color(154,192,230));        searchPanel.add(searchButton);    }    private void searchAllButtonInit(){        searchAllButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                List<Goods> g = null;                try {                    g = goodsService.queryAllGoods();                } catch (SQLException ex) {                    ex.printStackTrace();                }                updateData(g);            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        searchAllButton.setPreferredSize(new Dimension(100,20));        searchAllButton.setBackground(new Color(154,192,230));        searchPanel.add(searchAllButton);    }    private void addButtonInit(){        addButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                String goodsCode = null;                try {                    goodsCode = goodsService.queryMaxGoodsCode();                } catch (SQLException ex) {                    ex.printStackTrace();                }                int i = Integer.parseInt(goodsCode);                addRows.add(goodsTableModel.getRowCount());                maxCode = Math.max(maxCode, i) + 1;                goodsTableModel.addRow(new Object[]{maxCode + "", "", 0.0, 0});            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        buttonSameInit(addButton);        southPanel.add(addButton, BorderLayout.SOUTH);    }    private void sureAddButtonInit(){        sureAddButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                Vector ag = new Vector();                for(Object k : addRows){                    int c = (int) k;                    Goods g = new Goods();                    g.setGoods_Code((String) goodsTableModel.getValueAt(c, 0));                    g.setName((String) goodsTableModel.getValueAt(c, 1));                    Double price = Double.parseDouble(goodsTableModel.getValueAt(c, 2) + "") ;                    Integer count = Integer.parseInt( goodsTableModel.getValueAt(c, 3) + "");                    g.setPrice(price == null ? 0 : price);                    g.setCount(count == null ? 0 : count);                    ag.add(g);                }                try {                    goodsService.addSomeGoods(ag);                    addRows.clear();                    JOptionPane.showMessageDialog(null, "添加成功");                } catch (SQLException ex) {                    JOptionPane.showMessageDialog(null, "添加失败");                    ex.printStackTrace();                }            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        buttonSameInit(sureAddButton);        southPanel.add(sureAddButton, BorderLayout.SOUTH);    }    private void clearButtonInit(){        clearButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                int[] selectedRows = goodsTable.getSelectedRows();                Vector<String> deleteRows = new Vector<>();                for (int i : selectedRows){                    deleteRows.add((String) goodsTableModel.getValueAt(i,0));                }                addRows.clear();                try {                    goodsService.deleteGoodsByGoodsCode(deleteRows);                    updateData(goodsService.queryAllGoods());                    JOptionPane.showMessageDialog(null, "删除成功");                } catch (SQLException ex) {                    ex.printStackTrace();                }            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        buttonSameInit(clearButton);        southPanel.add(clearButton, BorderLayout.SOUTH);    }    private void updateButtonInit(){        updateButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                Set<String> keySet = updateRows.keySet();                for(String k : keySet){                    Vector data = (Vector) updateRows.get(k);                    Goods g = new Goods();                    g.setGoods_Code((String) data.get(0));                    g.setName((String) data.get(1));                    g.setPrice(Double.parseDouble((String) data.get(2)) );                    g.setCount(Integer.parseInt((String) data.get(3)) );                    try {                        goodsService.updateGoods(g);                        JOptionPane.showMessageDialog(null, "修改成功");                        updateRows.clear();                    } catch (SQLException ex) {                        JOptionPane.showMessageDialog(null, "修改失败");                        ex.printStackTrace();                    }                }            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        buttonSameInit(updateButton);        southPanel.add(updateButton, BorderLayout.SOUTH);    }    private void cancelButtonInit(){        cancelButton.addMouseListener(new MouseListener() {            @Override            public void mouseClicked(MouseEvent e) {                updateRows.clear();                goodsTableModel.getDataVector().removeAllElements();                goodsTableModel.setDataVector(beforeData,title);                goodsTable.setModel(goodsTableModel);                maxCode = 0;            }            @Override            public void mousePressed(MouseEvent e) {            }            @Override            public void mouseReleased(MouseEvent e) {            }            @Override            public void mouseEntered(MouseEvent e) {            }            @Override            public void mouseExited(MouseEvent e) {            }        });        buttonSameInit(cancelButton);        southPanel.add(cancelButton);    }    private void buttonSameInit(JButton button){        button.setPreferredSize(new Dimension(120,20));        button.setBackground(new Color(243,210,117));        button.setFont(new Font("微软雅黑", Font.BOLD,15));    }    private Object[][] getDate(List<Goods> goods){        int size = goods.size();        Object[][] data = new Object[size][4];        for(int i = 0; i < goods.size(); i++){            Goods iGoods = goods.get(i);            data[i][0] = iGoods.getGoods_Code();            data[i][1] = iGoods.getName();            data[i][2] = iGoods.getPrice();            data[i][3] = iGoods.getCount();        }        return data;    }    private void updateData(List<Goods> goods){        goodsTableModel.getDataVector().removeAllElements();        beforeData = getDate(goods);        goodsTableModel.setDataVector(beforeData,title);        goodsTable.setModel(goodsTableModel);        maxCode = 0;    }}